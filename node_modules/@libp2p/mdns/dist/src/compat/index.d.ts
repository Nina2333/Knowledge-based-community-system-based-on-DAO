import { EventEmitter } from '@libp2p/interfaces/events';
import type { PeerDiscovery, PeerDiscoveryEvents } from '@libp2p/interface-peer-discovery';
import { symbol } from '@libp2p/interface-peer-discovery';
import type { MulticastDNSComponents } from '../index.js';
export interface GoMulticastDNSInit {
    queryPeriod?: number;
    queryInterval?: number;
}
export declare class GoMulticastDNS extends EventEmitter<PeerDiscoveryEvents> implements PeerDiscovery {
    private _started;
    private readonly _responder;
    private readonly _querier;
    constructor(components: MulticastDNSComponents, options?: GoMulticastDNSInit);
    get [symbol](): true;
    get [Symbol.toStringTag](): string;
    isStarted(): boolean;
    start(): Promise<void>;
    stop(): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map