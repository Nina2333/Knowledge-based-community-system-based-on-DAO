import type { AddressSorter, PeerStore } from '@libp2p/interface-peer-store';
import type { Startable } from '@libp2p/interfaces/startable';
import type { ContentRouting } from '@libp2p/interface-content-routing';
import type { ConnectionManager } from '@libp2p/interface-connection-manager';
import type { TransportManager } from '@libp2p/interface-transport';
import type { PeerId } from '@libp2p/interface-peer-id';
import type { StreamHandlerOptions } from '@libp2p/interface-registrar';
export interface RelayConfig extends StreamHandlerOptions {
    enabled: boolean;
    advertise: RelayAdvertiseConfig;
    hop: HopConfig;
    autoRelay: AutoRelayConfig;
}
export interface HopConfig {
    enabled?: boolean;
    active?: boolean;
    timeout: number;
}
export interface RelayAdvertiseConfig {
    bootDelay?: number;
    enabled?: boolean;
    ttl?: number;
}
export interface AutoRelayConfig {
    enabled?: boolean;
    /**
     * maximum number of relays to listen
     */
    maxListeners: number;
}
export interface RelayInit extends RelayConfig {
    addressSorter?: AddressSorter;
}
export interface RelayComponents {
    peerId: PeerId;
    contentRouting: ContentRouting;
    peerStore: PeerStore;
    connectionManager: ConnectionManager;
    transportManager: TransportManager;
}
export declare class Relay implements Startable {
    private readonly components;
    private readonly init;
    private readonly autoRelay?;
    private timeout?;
    private started;
    /**
     * Creates an instance of Relay
     */
    constructor(components: RelayComponents, init: RelayInit);
    isStarted(): boolean;
    /**
     * Start Relay service
     */
    start(): Promise<void>;
    /**
     * Stop Relay service
     */
    stop(): Promise<void>;
    /**
     * Advertise hop relay service in the network.
     */
    _advertiseService(): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map