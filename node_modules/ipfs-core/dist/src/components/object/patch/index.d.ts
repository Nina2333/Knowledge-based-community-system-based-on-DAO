/**
 * @typedef {import('../../../types').Preload} Preload
 */
export class ObjectPatchAPI {
    /**
     * @param {object} config
     * @param {import('ipfs-repo').IPFSRepo} config.repo
     * @param {Preload} config.preload
     */
    constructor({ repo, preload }: {
        repo: import('ipfs-repo').IPFSRepo;
        preload: Preload;
    });
    addLink: (cid: import("multiformats").CID<unknown, number, number, import("multiformats").Version>, link: import("@ipld/dag-pb/dist/src/interface.js").PBLink, options?: import("ipfs-core-types").AbortOptions | undefined) => Promise<import("multiformats").CID<unknown, number, number, import("multiformats").Version>>;
    appendData: (cid: import("multiformats").CID<unknown, number, number, import("multiformats").Version>, data: Uint8Array, options?: import("ipfs-core-types").AbortOptions | undefined) => Promise<import("multiformats").CID<unknown, number, number, import("multiformats").Version>>;
    rmLink: (cid: import("multiformats").CID<unknown, number, number, import("multiformats").Version>, link: string | import("@ipld/dag-pb/dist/src/interface.js").PBLink, options?: import("ipfs-core-types").AbortOptions | undefined) => Promise<import("multiformats").CID<unknown, number, number, import("multiformats").Version>>;
    setData: (cid: import("multiformats").CID<unknown, number, number, import("multiformats").Version>, data: Uint8Array, options?: import("ipfs-core-types").AbortOptions | undefined) => Promise<import("multiformats").CID<unknown, number, number, import("multiformats").Version>>;
}
export type Preload = import('../../../types').Preload;
//# sourceMappingURL=index.d.ts.map