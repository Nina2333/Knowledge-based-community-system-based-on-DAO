import { Counter as PromCounter } from 'prom-client';
import { normaliseString } from './utils.js';
export class PrometheusCounterGroup {
    constructor(name, opts) {
        name = normaliseString(name);
        const help = normaliseString(opts.help ?? name);
        const label = this.label = normaliseString(opts.label ?? name);
        let collect;
        this.calculators = [];
        // calculated metric
        if (opts?.calculate != null) {
            this.calculators.push(opts.calculate);
            const self = this;
            collect = async function () {
                await Promise.all(self.calculators.map(async (calculate) => {
                    const values = await calculate();
                    Object.entries(values).forEach(([key, value]) => {
                        this.inc({ [label]: key }, value);
                    });
                }));
            };
        }
        this.counter = new PromCounter({
            name,
            help,
            labelNames: [this.label],
            registers: opts.registry !== undefined ? [opts.registry] : undefined,
            collect
        });
    }
    addCalculator(calculator) {
        this.calculators.push(calculator);
    }
    increment(values) {
        Object.entries(values).forEach(([key, value]) => {
            const inc = typeof value === 'number' ? value : 1;
            this.counter.inc({ [this.label]: key }, inc);
        });
    }
    reset() {
        this.counter.reset();
    }
}
//# sourceMappingURL=counter-group.js.map