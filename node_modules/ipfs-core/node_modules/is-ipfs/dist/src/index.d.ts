import type { Multiaddr } from '@multiformats/multiaddr';
import { CID } from 'multiformats/cid';
export declare const pathGatewayPattern: RegExp;
export declare const pathPattern: RegExp;
export declare const subdomainGatewayPattern: RegExp;
declare function isMultihash(hash: Uint8Array | string): boolean;
declare function isMultiaddr(input: string | Uint8Array | Multiaddr): input is Multiaddr;
declare function isCID(hash: CID | Uint8Array | string): hash is CID;
/**
 * @param {string | Uint8Array | Multiaddr} input
 */
declare function isPeerMultiaddr(input: string | Uint8Array | Multiaddr): boolean;
export declare const ipfsSubdomain: (url: string | Uint8Array) => boolean;
export declare const ipnsSubdomain: (url: string | Uint8Array) => boolean;
export declare const subdomain: (url: string | Uint8Array) => boolean;
export declare const ipfsUrl: (url: string | Uint8Array) => boolean;
export declare const ipnsUrl: (url: string | Uint8Array) => boolean;
export declare const url: (url: string | Uint8Array) => boolean;
export declare const path: (path: string | Uint8Array) => boolean;
export { isMultihash as multihash };
export { isMultiaddr as multiaddr };
export { isPeerMultiaddr as peerMultiaddr };
export { isCID as cid };
export declare const base32cid: (cid: CID | string | Uint8Array) => boolean;
export declare const ipfsPath: (path: string | Uint8Array) => boolean;
export declare const ipnsPath: (path: string | Uint8Array) => boolean;
export declare const urlOrPath: (x: string | Uint8Array) => boolean;
export declare const cidPath: (path: string | Uint8Array | CID) => boolean;
//# sourceMappingURL=index.d.ts.map