import type { Startable } from '@libp2p/interfaces/startable';
import type { TransportManager } from '@libp2p/interface-transport';
import type { AddressManager } from '@libp2p/interface-address-manager';
import type { PeerId } from '@libp2p/interface-peer-id';
import type { PeerStore } from '@libp2p/interface-peer-store';
export interface PeerRecordUpdaterComponents {
    peerId: PeerId;
    peerStore: PeerStore;
    transportManager: TransportManager;
    addressManager: AddressManager;
}
export declare class PeerRecordUpdater implements Startable {
    private readonly components;
    private started;
    constructor(components: PeerRecordUpdaterComponents);
    isStarted(): boolean;
    start(): Promise<void>;
    stop(): Promise<void>;
    /**
     * Create (or update if existing) self peer record and store it in the AddressBook.
     */
    update(): void;
}
//# sourceMappingURL=peer-record-updater.d.ts.map