import { EventEmitter } from '@libp2p/interfaces/events';
import type { PeerId } from '@libp2p/interface-peer-id';
import type { PublishResult, PubSub, PubSubEvents, StrictNoSign, StrictSign, TopicValidatorFn } from '@libp2p/interface-pubsub';
export declare class DummyPubSub extends EventEmitter<PubSubEvents> implements PubSub {
    topicValidators: Map<string, TopicValidatorFn>;
    isStarted(): boolean;
    start(): void | Promise<void>;
    stop(): void | Promise<void>;
    get globalSignaturePolicy(): typeof StrictSign | typeof StrictNoSign;
    get multicodecs(): string[];
    getPeers(): PeerId[];
    getTopics(): string[];
    subscribe(): void;
    unsubscribe(): void;
    getSubscribers(): PeerId[];
    publish(): Promise<PublishResult>;
}
//# sourceMappingURL=dummy-pubsub.d.ts.map