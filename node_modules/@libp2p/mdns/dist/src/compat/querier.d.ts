/// <reference types="node" />
import { EventEmitter } from '@libp2p/interfaces/events';
import type { PeerDiscovery, PeerDiscoveryEvents } from '@libp2p/interface-peer-discovery';
import type { ResponsePacket } from 'multicast-dns';
import type { RemoteInfo } from 'dgram';
import { symbol } from '@libp2p/interface-peer-discovery';
import type { Startable } from '@libp2p/interfaces/dist/src/startable.js';
import type { PeerId } from '@libp2p/interface-peer-id';
export interface QuerierInit {
    queryInterval?: number;
    queryPeriod?: number;
}
export interface QuerierComponents {
    peerId: PeerId;
}
export interface Handle {
    stop: () => Promise<void>;
}
export declare class Querier extends EventEmitter<PeerDiscoveryEvents> implements PeerDiscovery, Startable {
    private readonly _init;
    private _handle?;
    private readonly components;
    constructor(components: QuerierComponents, init?: QuerierInit);
    get [symbol](): true;
    get [Symbol.toStringTag](): string;
    isStarted(): boolean;
    start(): void;
    _onResponse(event: ResponsePacket, info: RemoteInfo): void;
    stop(): Promise<void>;
}
//# sourceMappingURL=querier.d.ts.map