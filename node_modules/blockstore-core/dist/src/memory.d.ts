/**
 * @typedef {import('interface-blockstore').Pair} Pair
 * @typedef {import('interface-blockstore').Blockstore} Blockstore
 * @typedef {import('interface-store').Options} Options
 */
/**
 * @class MemoryBlockstore
 * @implements {Blockstore}
 */
export class MemoryBlockstore extends BaseBlockstore implements Blockstore {
    /** @type {Record<string, Uint8Array>} */
    data: Record<string, Uint8Array>;
    /**
     * @param {CID} key
     * @param {Uint8Array} val
     */
    put(key: CID, val: Uint8Array): Promise<void>;
    /**
     * @param {CID} key
     */
    get(key: CID): Promise<Uint8Array>;
    /**
     * @param {CID} key
     */
    has(key: CID): Promise<boolean>;
    /**
     * @param {CID} key
     */
    delete(key: CID): Promise<void>;
    _all(): AsyncGenerator<{
        key: CID<unknown, 85, number, 1>;
        value: Uint8Array;
    }, void, undefined>;
    _allKeys(): AsyncGenerator<CID<unknown, 85, number, 1>, void, undefined>;
}
export type Pair = import('interface-blockstore').Pair;
export type Blockstore = import('interface-blockstore').Blockstore;
export type Options = import('interface-store').Options;
import { BaseBlockstore } from "./base.js";
import { CID } from "multiformats/cid";
//# sourceMappingURL=memory.d.ts.map