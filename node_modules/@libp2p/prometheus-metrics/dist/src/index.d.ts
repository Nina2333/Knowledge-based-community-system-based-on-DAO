import type { CalculatedMetricOptions, Metrics } from '@libp2p/interface-metrics';
import { DefaultMetricsCollectorConfiguration, Registry } from 'prom-client';
export interface PrometheusMetricsInit {
    /**
     * Use a custom registry to register metrics.
     * By default, the global registry is used to register metrics.
     */
    registry?: Registry;
    /**
     * By default we collect default metrics - CPU, memory etc, to not do
     * this, pass true here
     */
    collectDefaultMetrics?: boolean;
    /**
     * prom-client options to pass to the `collectDefaultMetrics` function
     */
    defaultMetrics?: DefaultMetricsCollectorConfiguration;
    /**
     * All metrics in prometheus are global so to prevent clashes in naming
     * we reset the global metrics registry on creation - to not do this,
     * pass true here
     */
    preserveExistingMetrics?: boolean;
}
export interface PrometheusCalculatedMetricOptions<T = number> extends CalculatedMetricOptions<T> {
    registry?: Registry;
}
export declare function prometheusMetrics(init?: Partial<PrometheusMetricsInit>): () => Metrics;
//# sourceMappingURL=index.d.ts.map