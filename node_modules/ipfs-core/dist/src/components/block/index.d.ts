/**
 * @typedef {import('../../types').Preload} Preload
 */
export class BlockAPI {
    /**
     * @param {object} config
     * @param {import('ipfs-core-utils/src/multihashes').Multihashes} config.hashers
     * @param {import('ipfs-core-utils/src/multicodecs').Multicodecs} config.codecs
     * @param {Preload} config.preload
     * @param {import('ipfs-repo').IPFSRepo} config.repo
     */
    constructor({ codecs, hashers, preload, repo }: {
        hashers: import('ipfs-core-utils/src/multihashes').Multihashes;
        codecs: import('ipfs-core-utils/src/multicodecs').Multicodecs;
        preload: Preload;
        repo: import('ipfs-repo').IPFSRepo;
    });
    get: (cid: import("multiformats").CID<unknown, number, number, import("multiformats").Version>, options?: (import("ipfs-core-types").AbortOptions & import("ipfs-core-types/src/utils.js").PreloadOptions) | undefined) => Promise<Uint8Array>;
    put: (block: Uint8Array, options?: import("ipfs-core-types/src/block/index.js").PutOptions | undefined) => Promise<import("multiformats").CID<unknown, number, number, import("multiformats").Version>>;
    rm: (cid: import("multiformats").CID<unknown, number, number, import("multiformats").Version> | import("multiformats").CID<unknown, number, number, import("multiformats").Version>[], options?: import("ipfs-core-types/src/block/index.js").RmOptions | undefined) => AsyncIterable<import("ipfs-core-types/src/block/index.js").RmResult>;
    stat: (cid: import("multiformats").CID<unknown, number, number, import("multiformats").Version>, options?: (import("ipfs-core-types").AbortOptions & import("ipfs-core-types/src/utils.js").PreloadOptions) | undefined) => Promise<import("ipfs-core-types/src/block/index.js").StatResult>;
}
export type Preload = import('../../types').Preload;
//# sourceMappingURL=index.d.ts.map