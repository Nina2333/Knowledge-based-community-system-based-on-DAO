/**
 * Takes an (async) iterable that emits things and returns an async iterable that
 * emits those things in fixed-sized batches
 */
export default async function* batch(source, size = 1) {
    let things = [];
    if (size < 1) {
        size = 1;
    }
    for await (const thing of source) {
        things.push(thing);
        while (things.length >= size) {
            yield things.slice(0, size);
            things = things.slice(size);
        }
    }
    while (things.length > 0) {
        yield things.slice(0, size);
        things = things.slice(size);
    }
}
//# sourceMappingURL=index.js.map