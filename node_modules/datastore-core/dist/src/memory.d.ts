/**
 * @typedef {import('interface-datastore').Pair} Pair
 * @typedef {import('interface-datastore').Datastore} Datastore
 * @typedef {import('interface-store').Options} Options
 */
/**
 * @class MemoryDatastore
 * @implements {Datastore}
 */
export class MemoryDatastore extends BaseDatastore implements Datastore {
    /** @type {Record<string, Uint8Array>} */
    data: Record<string, Uint8Array>;
    /**
     * @param {Key} key
     * @param {Uint8Array} val
     */
    put(key: Key, val: Uint8Array): Promise<void>;
    /**
     * @param {Key} key
     */
    get(key: Key): Promise<Uint8Array>;
    /**
     * @param {Key} key
     */
    has(key: Key): Promise<boolean>;
    /**
     * @param {Key} key
     */
    delete(key: Key): Promise<void>;
    _all(): AsyncGenerator<{
        key: Key;
        value: Uint8Array;
    }, void, undefined>;
    _allKeys(): AsyncGenerator<Key, void, undefined>;
}
export type Pair = import('interface-datastore').Pair;
export type Datastore = import('interface-datastore').Datastore;
export type Options = import('interface-store').Options;
import { BaseDatastore } from "./base.js";
import { Key } from "interface-datastore/key";
//# sourceMappingURL=memory.d.ts.map