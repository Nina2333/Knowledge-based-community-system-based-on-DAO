export class PinAPI {
    /**
     * @param {object} config
     * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs
     * @param {import('ipfs-repo').IPFSRepo} config.repo
     */
    constructor({ codecs, repo }: {
        codecs: import('ipfs-core-utils/multicodecs').Multicodecs;
        repo: import('ipfs-repo').IPFSRepo;
    });
    addAll: (source: import("ipfs-core-types").AwaitIterable<import("ipfs-core-types/src/pin/index.js").AddInput>, options?: import("ipfs-core-types/src/pin/index.js").AddAllOptions | undefined) => AsyncIterable<import("multiformats").CID<unknown, number, number, import("multiformats").Version>>;
    add: (path: string | import("multiformats").CID<unknown, number, number, import("multiformats").Version>, options?: import("ipfs-core-types/src/pin/index.js").AddOptions | undefined) => Promise<import("multiformats").CID<unknown, number, number, import("multiformats").Version>>;
    rmAll: (source: import("ipfs-core-types").AwaitIterable<import("ipfs-core-types/src/pin/index.js").RmAllInput>, options?: import("ipfs-core-types").AbortOptions | undefined) => AsyncIterable<import("multiformats").CID<unknown, number, number, import("multiformats").Version>>;
    rm: (ipfsPath: string | import("multiformats").CID<unknown, number, number, import("multiformats").Version>, options?: import("ipfs-core-types/src/pin/index.js").RmOptions | undefined) => Promise<import("multiformats").CID<unknown, number, number, import("multiformats").Version>>;
    ls: (options?: import("ipfs-core-types/src/pin/index.js").LsOptions | undefined) => AsyncIterable<import("ipfs-core-types/src/pin/index.js").LsResult>;
    /** @type {import('ipfs-core-types/src/pin/remote').API} */
    remote: import('ipfs-core-types/src/pin/remote').API;
}
//# sourceMappingURL=index.d.ts.map