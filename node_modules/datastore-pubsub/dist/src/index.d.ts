/**
 * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId
 * @typedef {import('./types').SubscriptionKeyFn} SubscriptionKeyFn
 * @typedef {import('@libp2p/interface-pubsub').Message} PubSubMessage
 * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions
 */
export class PubSubDatastore extends BaseDatastore {
    /**
     * Creates an instance of DatastorePubsub.
     *
     * @param {import('@libp2p/interface-pubsub').PubSub} pubsub - pubsub implementation
     * @param {import('interface-datastore').Datastore} datastore - datastore instance
     * @param {PeerId} peerId - peer-id instance
     * @param {import('@libp2p/interface-dht').ValidateFn} validator - validator function
     * @param {import('@libp2p/interface-dht').SelectFn} selector - selector function
     * @param {SubscriptionKeyFn} [subscriptionKeyFn] - function to manipulate the key topic received before processing it
     * @memberof DatastorePubsub
     */
    constructor(pubsub: import('@libp2p/interface-pubsub').PubSub, datastore: import('interface-datastore').Datastore, peerId: PeerId, validator: import('@libp2p/interface-dht').ValidateFn, selector: import('@libp2p/interface-dht').SelectFn, subscriptionKeyFn?: import("./types").SubscriptionKeyFn | undefined);
    _pubsub: import("@libp2p/interface-pubsub").PubSub<import("@libp2p/interface-pubsub").PubSubEvents>;
    _datastore: import("interface-datastore").Datastore;
    _peerId: import("@libp2p/interface-peer-id").PeerId;
    _validator: import("@libp2p/interface-dht").ValidateFn;
    _selector: import("@libp2p/interface-dht").SelectFn;
    _handleSubscriptionKeyFn: import("./types").SubscriptionKeyFn | undefined;
    /**
     * handles pubsub subscription messages
     *
     * @param {CustomEvent<PubSubMessage>} evt
     */
    _onMessage(evt: CustomEvent<PubSubMessage>): Promise<void>;
    /**
     * Publishes a value through pubsub.
     *
     * @param {Uint8Array} key - identifier of the value to be published.
     * @param {Uint8Array} val - value to be propagated.
     * @param {AbortOptions} [options]
     */
    put(key: Uint8Array, val: Uint8Array, options?: import("@libp2p/interfaces").AbortOptions | undefined): Promise<void>;
    /**
     * Try to subscribe a topic with Pubsub and returns the local value if available.
     *
     * @param {Uint8Array} key - identifier of the value to be subscribed.
     * @param {AbortOptions} [options]
     */
    get(key: Uint8Array, options?: import("@libp2p/interfaces").AbortOptions | undefined): Promise<Uint8Array>;
    /**
     * Unsubscribe topic.
     *
     * @param {Uint8Array} key - identifier of the value to unsubscribe.
     * @returns {void}
     */
    unsubscribe(key: Uint8Array): void;
    /**
     * Get record from local datastore
     *
     * @private
     * @param {Uint8Array} key
     * @param {AbortOptions} [options]
     */
    private _getLocal;
    /**
     * Store the received record if it is better than the current stored
     *
     * @param {Uint8Array} key
     * @param {Uint8Array} data
     * @param {AbortOptions} [options]
     */
    _storeIfSubscriptionIsBetter(key: Uint8Array, data: Uint8Array, options?: import("@libp2p/interfaces").AbortOptions | undefined): Promise<void>;
    /**
     * Validate record according to the received validation function
     *
     * @param {Uint8Array} key
     * @param {Uint8Array} value
     */
    _validateRecord(key: Uint8Array, value: Uint8Array): Promise<void>;
    /**
     * Select the best record according to the received select function
     *
     * @param {Uint8Array} key
     * @param {Uint8Array[]} records
     */
    _selectRecord(key: Uint8Array, records: Uint8Array[]): Promise<boolean>;
    /**
     * Verify if the record received through pubsub is valid and better than the one currently stored
     *
     * @param {Uint8Array} key
     * @param {Uint8Array} val
     */
    _isBetter(key: Uint8Array, val: Uint8Array): Promise<boolean>;
    /**
     * add record to datastore
     *
     * @param {Uint8Array} key
     * @param {Uint8Array} data
     * @param {AbortOptions} [options]
     */
    _storeRecord(key: Uint8Array, data: Uint8Array, options?: import("@libp2p/interfaces").AbortOptions | undefined): Promise<void>;
}
export type PeerId = import('@libp2p/interface-peer-id').PeerId;
export type SubscriptionKeyFn = import('./types').SubscriptionKeyFn;
export type PubSubMessage = import('@libp2p/interface-pubsub').Message;
export type AbortOptions = import('@libp2p/interfaces').AbortOptions;
import { BaseDatastore } from "datastore-core";
//# sourceMappingURL=index.d.ts.map