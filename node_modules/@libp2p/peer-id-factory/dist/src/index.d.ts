import type { PublicKey, PrivateKey } from '@libp2p/interface-keys';
import type { RSAPeerId, Ed25519PeerId, Secp256k1PeerId, PeerId } from '@libp2p/interface-peer-id';
export declare const createEd25519PeerId: () => Promise<Ed25519PeerId>;
export declare const createSecp256k1PeerId: () => Promise<Secp256k1PeerId>;
export declare const createRSAPeerId: (opts?: {
    bits: number;
}) => Promise<RSAPeerId>;
export declare function createFromPubKey(publicKey: PublicKey): Promise<PeerId>;
export declare function createFromPrivKey(privateKey: PrivateKey): Promise<PeerId>;
export declare function exportToProtobuf(peerId: RSAPeerId | Ed25519PeerId | Secp256k1PeerId, excludePrivateKey?: boolean): Uint8Array;
export declare function createFromProtobuf(buf: Uint8Array): Promise<PeerId>;
export declare function createFromJSON(obj: {
    id: string;
    privKey?: string;
    pubKey?: string;
}): Promise<PeerId>;
//# sourceMappingURL=index.d.ts.map