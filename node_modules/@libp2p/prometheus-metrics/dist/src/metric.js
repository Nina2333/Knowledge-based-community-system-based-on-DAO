import { Gauge } from 'prom-client';
import { normaliseString } from './utils.js';
export class PrometheusMetric {
    constructor(name, opts) {
        name = normaliseString(name);
        const help = normaliseString(opts.help ?? name);
        const labels = opts.label != null ? [normaliseString(opts.label)] : [];
        let collect;
        this.calculators = [];
        // calculated metric
        if (opts?.calculate != null) {
            this.calculators.push(opts.calculate);
            const self = this;
            collect = async function () {
                const values = await Promise.all(self.calculators.map(async (calculate) => await calculate()));
                const sum = values.reduce((acc, curr) => acc + curr, 0);
                this.set(sum);
            };
        }
        this.gauge = new Gauge({
            name,
            help,
            labelNames: labels,
            registers: opts.registry !== undefined ? [opts.registry] : undefined,
            collect
        });
    }
    addCalculator(calculator) {
        this.calculators.push(calculator);
    }
    update(value) {
        this.gauge.set(value);
    }
    increment(value = 1) {
        this.gauge.inc(value);
    }
    decrement(value = 1) {
        this.gauge.dec(value);
    }
    reset() {
        this.gauge.reset();
    }
    timer() {
        return this.gauge.startTimer();
    }
}
//# sourceMappingURL=metric.js.map