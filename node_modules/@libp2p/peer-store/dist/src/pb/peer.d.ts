import type { Codec } from 'protons-runtime';
import type { Uint8ArrayList } from 'uint8arraylist';
export interface Peer {
    addresses: Address[];
    protocols: string[];
    metadata: Metadata[];
    pubKey?: Uint8Array;
    peerRecordEnvelope?: Uint8Array;
}
export declare namespace Peer {
    const codec: () => Codec<Peer>;
    const encode: (obj: Partial<Peer>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => Peer;
}
export interface Address {
    multiaddr: Uint8Array;
    isCertified?: boolean;
}
export declare namespace Address {
    const codec: () => Codec<Address>;
    const encode: (obj: Partial<Address>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => Address;
}
export interface Metadata {
    key: string;
    value: Uint8Array;
}
export declare namespace Metadata {
    const codec: () => Codec<Metadata>;
    const encode: (obj: Partial<Metadata>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => Metadata;
}
//# sourceMappingURL=peer.d.ts.map