import errCode from 'err-code';
import { isStartable } from '@libp2p/interfaces/startable';
export class DefaultComponents {
    constructor(init = {}) {
        this._started = false;
        this._peerId = init.peerId;
        this._addressManager = init.addressManager;
        this._peerStore = init.peerStore;
        this._upgrader = init.upgrader;
        this._metrics = init.metrics;
        this._registrar = init.registrar;
        this._connectionManager = init.connectionManager;
        this._transportManager = init.transportManager;
        this._connectionGater = init.connectionGater;
        this._contentRouting = init.contentRouting;
        this._peerRouting = init.peerRouting;
        this._datastore = init.datastore;
        this._connectionProtector = init.connectionProtector;
        this._dht = init.dht;
        this._pubsub = init.pubsub;
        this._dialer = init.dialer;
    }
    isStarted() {
        return this._started;
    }
    async beforeStart() {
        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {
            if (startable.beforeStart != null) {
                await startable.beforeStart();
            }
        }));
    }
    async start() {
        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {
            await startable.start();
        }));
        this._started = true;
    }
    async afterStart() {
        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {
            if (startable.afterStart != null) {
                await startable.afterStart();
            }
        }));
    }
    async beforeStop() {
        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {
            if (startable.beforeStop != null) {
                await startable.beforeStop();
            }
        }));
    }
    async stop() {
        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {
            await startable.stop();
        }));
        this._started = false;
    }
    async afterStop() {
        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {
            if (startable.afterStop != null) {
                await startable.afterStop();
            }
        }));
    }
    get peerId() {
        if (this._peerId == null) {
            throw errCode(new Error('peerId not set'), 'ERR_SERVICE_MISSING');
        }
        return this._peerId;
    }
    set peerId(peerId) {
        this._peerId = peerId;
    }
    get addressManager() {
        if (this._addressManager == null) {
            throw errCode(new Error('addressManager not set'), 'ERR_SERVICE_MISSING');
        }
        return this._addressManager;
    }
    set addressManager(addressManager) {
        this._addressManager = addressManager;
    }
    get peerStore() {
        if (this._peerStore == null) {
            throw errCode(new Error('peerStore not set'), 'ERR_SERVICE_MISSING');
        }
        return this._peerStore;
    }
    set peerStore(peerStore) {
        this._peerStore = peerStore;
    }
    get upgrader() {
        if (this._upgrader == null) {
            throw errCode(new Error('upgrader not set'), 'ERR_SERVICE_MISSING');
        }
        return this._upgrader;
    }
    set upgrader(upgrader) {
        this._upgrader = upgrader;
    }
    get registrar() {
        if (this._registrar == null) {
            throw errCode(new Error('registrar not set'), 'ERR_SERVICE_MISSING');
        }
        return this._registrar;
    }
    set registrar(registrar) {
        this._registrar = registrar;
    }
    get connectionManager() {
        if (this._connectionManager == null) {
            throw errCode(new Error('connectionManager not set'), 'ERR_SERVICE_MISSING');
        }
        return this._connectionManager;
    }
    set connectionManager(connectionManager) {
        this._connectionManager = connectionManager;
    }
    get transportManager() {
        if (this._transportManager == null) {
            throw errCode(new Error('transportManager not set'), 'ERR_SERVICE_MISSING');
        }
        return this._transportManager;
    }
    set transportManager(transportManager) {
        this._transportManager = transportManager;
    }
    get connectionGater() {
        if (this._connectionGater == null) {
            throw errCode(new Error('connectionGater not set'), 'ERR_SERVICE_MISSING');
        }
        return this._connectionGater;
    }
    set connectionGater(connectionGater) {
        this._connectionGater = connectionGater;
    }
    get contentRouting() {
        if (this._contentRouting == null) {
            throw errCode(new Error('contentRouting not set'), 'ERR_SERVICE_MISSING');
        }
        return this._contentRouting;
    }
    set contentRouting(contentRouting) {
        this._contentRouting = contentRouting;
    }
    get peerRouting() {
        if (this._peerRouting == null) {
            throw errCode(new Error('peerRouting not set'), 'ERR_SERVICE_MISSING');
        }
        return this._peerRouting;
    }
    set peerRouting(peerRouting) {
        this._peerRouting = peerRouting;
    }
    get datastore() {
        if (this._datastore == null) {
            throw errCode(new Error('datastore not set'), 'ERR_SERVICE_MISSING');
        }
        return this._datastore;
    }
    set datastore(datastore) {
        this._datastore = datastore;
    }
    get connectionProtector() {
        return this._connectionProtector;
    }
    set connectionProtector(connectionProtector) {
        this._connectionProtector = connectionProtector;
    }
    get dialer() {
        if (this._dialer == null) {
            throw errCode(new Error('dialer not set'), 'ERR_SERVICE_MISSING');
        }
        return this._dialer;
    }
    set dialer(dialer) {
        this._dialer = dialer;
    }
    get metrics() {
        return this._metrics;
    }
    set metrics(metrics) {
        this._metrics = metrics;
    }
    get dht() {
        return this._dht;
    }
    set dht(dht) {
        this._dht = dht;
    }
    get pubsub() {
        return this._pubsub;
    }
    set pubsub(pubsub) {
        this._pubsub = pubsub;
    }
}
//# sourceMappingURL=components.js.map