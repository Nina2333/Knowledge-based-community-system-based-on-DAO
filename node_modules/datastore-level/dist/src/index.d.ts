/**
 * @typedef {import('interface-datastore').Datastore} Datastore
 * @typedef {import('interface-datastore').Pair} Pair
 * @typedef {import('interface-datastore').Batch} Batch
 * @typedef {import('interface-datastore').Query} Query
 * @typedef {import('interface-datastore').KeyQuery} KeyQuery
 * @typedef {import('interface-datastore').Options} QueryOptions
 * @typedef {import('abstract-level').AbstractLevel<any, string, Uint8Array>} LevelDb
 */
/**
 * A datastore backed by leveldb
 */
export class LevelDatastore extends BaseDatastore {
    /**
     * @param {string | LevelDb} path
     * @param {import('level').DatabaseOptions<string, Uint8Array> & import('level').OpenOptions} [opts]
     */
    constructor(path: string | import("abstract-level/types/abstract-level").AbstractLevel<any, string, Uint8Array>, opts?: (import("classic-level").DatabaseOptions<string, Uint8Array> & import("browser-level").DatabaseOptions<string, Uint8Array> & import("classic-level").OpenOptions & import("abstract-level").AbstractOpenOptions) | undefined);
    /** @type {LevelDb} */
    db: import("abstract-level/types/abstract-level").AbstractLevel<any, string, Uint8Array>;
    /** @type {import('level').OpenOptions} */
    opts: import('level').OpenOptions;
    /**
     * @param {Key} key
     * @param {Uint8Array} value
     */
    put(key: Key, value: Uint8Array): Promise<void>;
    /**
     * @param {Key} key
     * @returns {Promise<Uint8Array>}
     */
    get(key: Key): Promise<Uint8Array>;
    /**
     * @param {Key} key
     * @returns {Promise<boolean>}
     */
    has(key: Key): Promise<boolean>;
    /**
     * @param {Key} key
     * @returns {Promise<void>}
     */
    delete(key: Key): Promise<void>;
    /**
     * @param {Query} q
     */
    query(q: Query): AsyncIterable<import("interface-datastore").Pair>;
    /**
     * @param {KeyQuery} q
     */
    queryKeys(q: KeyQuery): AsyncGenerator<Key, void, undefined>;
    /**
     * @param {object} opts
     * @param {boolean} opts.values
     * @param {string} [opts.prefix]
     * @returns {AsyncIterable<Pair>}
     */
    _query(opts: {
        values: boolean;
        prefix?: string | undefined;
    }): AsyncIterable<Pair>;
}
export type LevelIterator = {
    next: (cb: (err: Error, key: string | Uint8Array | null, value: any) => void) => void;
    end: (cb: (err: Error) => void) => void;
};
export type Datastore = import('interface-datastore').Datastore;
export type Pair = import('interface-datastore').Pair;
export type Batch = import('interface-datastore').Batch;
export type Query = import('interface-datastore').Query;
export type KeyQuery = import('interface-datastore').KeyQuery;
export type QueryOptions = import('interface-datastore').Options;
export type LevelDb = import('abstract-level').AbstractLevel<any, string, Uint8Array>;
import { BaseDatastore } from "datastore-core";
import { Key } from "interface-datastore";
//# sourceMappingURL=index.d.ts.map