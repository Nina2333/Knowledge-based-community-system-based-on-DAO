import type { ConnectionGater, ConnectionProtector } from '@libp2p/interface-connection';
import type { ContentRouting } from '@libp2p/interface-content-routing';
import type { AddressManager } from '@libp2p/interface-address-manager';
import { Startable } from '@libp2p/interfaces/startable';
import type { Metrics } from '@libp2p/interface-metrics';
import type { PeerId } from '@libp2p/interface-peer-id';
import type { PeerRouting } from '@libp2p/interface-peer-routing';
import type { PeerStore } from '@libp2p/interface-peer-store';
import type { Registrar } from '@libp2p/interface-registrar';
import type { TransportManager, Upgrader } from '@libp2p/interface-transport';
import type { Datastore } from 'interface-datastore';
import type { PubSub } from '@libp2p/interface-pubsub';
import type { DualDHT } from '@libp2p/interface-dht';
import type { ConnectionManager, Dialer } from '@libp2p/interface-connection-manager';
export interface Components {
    peerId: PeerId;
    addressManager: AddressManager;
    peerStore: PeerStore;
    upgrader: Upgrader;
    registrar: Registrar;
    connectionManager: ConnectionManager;
    transportManager: TransportManager;
    connectionGater: ConnectionGater;
    contentRouting: ContentRouting;
    peerRouting: PeerRouting;
    datastore: Datastore;
    connectionProtector?: ConnectionProtector;
    dialer: Dialer;
    metrics?: Metrics;
    dht?: DualDHT;
    pubsub?: PubSub;
}
export interface ComponentsInit {
    peerId?: PeerId;
    addressManager?: AddressManager;
    peerStore?: PeerStore;
    upgrader?: Upgrader;
    metrics?: Metrics;
    registrar?: Registrar;
    connectionManager?: ConnectionManager;
    transportManager?: TransportManager;
    connectionGater?: ConnectionGater;
    contentRouting?: ContentRouting;
    peerRouting?: PeerRouting;
    datastore?: Datastore;
    connectionProtector?: ConnectionProtector;
    dht?: DualDHT;
    pubsub?: PubSub;
    dialer?: Dialer;
}
export declare class DefaultComponents implements Components, Startable {
    private _peerId?;
    private _addressManager?;
    private _peerStore?;
    private _upgrader?;
    private _metrics?;
    private _registrar?;
    private _connectionManager?;
    private _transportManager?;
    private _connectionGater?;
    private _contentRouting?;
    private _peerRouting?;
    private _datastore?;
    private _connectionProtector?;
    private _dht?;
    private _pubsub?;
    private _dialer?;
    private _started;
    constructor(init?: ComponentsInit);
    isStarted(): boolean;
    beforeStart(): Promise<void>;
    start(): Promise<void>;
    afterStart(): Promise<void>;
    beforeStop(): Promise<void>;
    stop(): Promise<void>;
    afterStop(): Promise<void>;
    get peerId(): PeerId;
    set peerId(peerId: PeerId);
    get addressManager(): AddressManager;
    set addressManager(addressManager: AddressManager);
    get peerStore(): PeerStore;
    set peerStore(peerStore: PeerStore);
    get upgrader(): Upgrader;
    set upgrader(upgrader: Upgrader);
    get registrar(): Registrar;
    set registrar(registrar: Registrar);
    get connectionManager(): ConnectionManager;
    set connectionManager(connectionManager: ConnectionManager);
    get transportManager(): TransportManager;
    set transportManager(transportManager: TransportManager);
    get connectionGater(): ConnectionGater;
    set connectionGater(connectionGater: ConnectionGater);
    get contentRouting(): ContentRouting;
    set contentRouting(contentRouting: ContentRouting);
    get peerRouting(): PeerRouting;
    set peerRouting(peerRouting: PeerRouting);
    get datastore(): Datastore;
    set datastore(datastore: Datastore);
    get connectionProtector(): ConnectionProtector | undefined;
    set connectionProtector(connectionProtector: ConnectionProtector | undefined);
    get dialer(): Dialer;
    set dialer(dialer: Dialer);
    get metrics(): Metrics | undefined;
    set metrics(metrics: Metrics | undefined);
    get dht(): DualDHT | undefined;
    set dht(dht: DualDHT | undefined);
    get pubsub(): PubSub | undefined;
    set pubsub(pubsub: PubSub | undefined);
}
//# sourceMappingURL=components.d.ts.map