/**
 * @packageDocumentation
 *
 * This module makes it easy to send and receive Protobuf encoded messages over
 * streams.
 *
 * @example
 *
 * ```typescript
 * import { pbStream } from 'it-pb-stream'
 * import { MessageType } from './src/my-message-type.js'
 *
 * // RequestType and ResponseType have been generate from `.proto` files and have
 * // `.encode` and `.decode` methods for serialization/deserialization
 *
 * const stream = pbStream(duplex)
 * stream.writePB({
 *   foo: 'bar'
 * }, MessageType)
 * const res = await stream.readPB(MessageType)
 * ```
 */
import * as lp from 'it-length-prefixed';
import type { Duplex } from 'it-stream-types';
import type { Uint8ArrayList } from 'uint8arraylist';
/**
 * A protobuf decoder - takes a byte array and returns an object
 */
export interface Decoder<T> {
    (data: Uint8Array | Uint8ArrayList): T;
}
/**
 * A protobuf encoder - takes an object and returns a byte array
 */
export interface Encoder<T> {
    (data: T): Uint8Array;
}
/**
 * Convinience methods for working with protobuf streams
 */
export interface ProtobufStream {
    /**
     * Read a set number of bytes from the stream
     */
    read: (bytes?: number) => Promise<Uint8ArrayList>;
    /**
     * Read the next length-prefixed number of bytes from the stream
     */
    readLP: () => Promise<Uint8ArrayList>;
    /**
     * Read the next length-prefixed byte array from the stream and decode it as the passed protobuf format
     */
    readPB: <T>(proto: {
        decode: Decoder<T>;
    }) => Promise<T>;
    /**
     * Write the passed bytes to the stream
     */
    write: (input: Uint8Array | Uint8ArrayList) => void;
    /**
     * Write the passed bytes to the stream prefixed by their length
     */
    writeLP: (input: Uint8Array | Uint8ArrayList) => void;
    /**
     * Encode the passed object as a protobuf message and write it's length-prefixed bytes tot he stream
     */
    writePB: <T>(data: T, proto: {
        encode: Encoder<T>;
    }) => void;
    /**
     * Returns an object with read/write methods for operating on protobuf messages
     */
    pb: <T>(proto: {
        encode: Encoder<T>;
        decode: Decoder<T>;
    }) => {
        read: () => Promise<T>;
        write: (d: T) => void;
    };
    /**
     * Returns the underlying stream
     */
    unwrap: () => Duplex<Uint8ArrayList, Uint8Array>;
}
export interface Opts {
    poolSize: number;
    minPoolSize: number;
    lengthEncoder: lp.LengthEncoderFunction;
    lengthDecoder: lp.LengthDecoderFunction;
    maxLengthLength: number;
    maxDataLength: number;
}
export declare function pbStream(duplex: Duplex<Uint8ArrayList | Uint8Array, Uint8Array>, opts?: {}): ProtobufStream;
//# sourceMappingURL=index.d.ts.map