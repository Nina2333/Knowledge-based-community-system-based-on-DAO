import { CMS } from './cms.js';
import type { PeerId } from '@libp2p/interface-peer-id';
import type { Startable } from '@libp2p/interfaces/dist/src/startable';
import type { Datastore } from 'interface-datastore';
import type { KeyTypes } from '@libp2p/crypto/keys';
export interface DEKConfig {
    hash: string;
    salt: string;
    iterationCount: number;
    keyLength: number;
}
export interface KeyChainInit {
    pass?: string;
    dek?: DEKConfig;
}
/**
 * Information about a key.
 */
export interface KeyInfo {
    /**
     * The universally unique key id
     */
    id: string;
    /**
     * The local key name.
     */
    name: string;
}
export interface KeyChainComponents {
    peerId: PeerId;
    datastore: Datastore;
}
/**
 * Manages the lifecycle of a key. Keys are encrypted at rest using PKCS #8.
 *
 * A key in the store has two entries
 * - '/info/*key-name*', contains the KeyInfo for the key
 * - '/pkcs8/*key-name*', contains the PKCS #8 for the key
 *
 */
export declare class KeyChain implements Startable {
    private readonly components;
    private readonly init;
    private started;
    /**
     * Creates a new instance of a key chain
     */
    constructor(components: KeyChainComponents, init: KeyChainInit);
    isStarted(): boolean;
    start(): Promise<void>;
    stop(): void;
    /**
     * Gets an object that can encrypt/decrypt protected data
     * using the Cryptographic Message Syntax (CMS).
     *
     * CMS describes an encapsulation syntax for data protection. It
     * is used to digitally sign, digest, authenticate, or encrypt
     * arbitrary message content
     */
    get cms(): CMS;
    /**
     * Generates the options for a keychain.  A random salt is produced.
     *
     * @returns {object}
     */
    static generateOptions(): KeyChainInit;
    /**
     * Gets an object that can encrypt/decrypt protected data.
     * The default options for a keychain.
     *
     * @returns {object}
     */
    static get options(): {
        dek: {
            keyLength: number;
            iterationCount: number;
            salt: string;
            hash: string;
        };
    };
    /**
     * Create a new key.
     *
     * @param {string} name - The local key name; cannot already exist.
     * @param {string} type - One of the key types; 'rsa'.
     * @param {number} [size = 2048] - The key size in bits. Used for rsa keys only
     */
    createKey(name: string, type: KeyTypes, size?: number): Promise<KeyInfo>;
    /**
     * List all the keys.
     *
     * @returns {Promise<KeyInfo[]>}
     */
    listKeys(): Promise<any[]>;
    /**
     * Find a key by it's id
     */
    findKeyById(id: string): Promise<KeyInfo>;
    /**
     * Find a key by it's name.
     *
     * @param {string} name - The local key name.
     * @returns {Promise<KeyInfo>}
     */
    findKeyByName(name: string): Promise<KeyInfo>;
    /**
     * Remove an existing key.
     *
     * @param {string} name - The local key name; must already exist.
     * @returns {Promise<KeyInfo>}
     */
    removeKey(name: string): Promise<KeyInfo>;
    /**
     * Rename a key
     *
     * @param {string} oldName - The old local key name; must already exist.
     * @param {string} newName - The new local key name; must not already exist.
     * @returns {Promise<KeyInfo>}
     */
    renameKey(oldName: string, newName: string): Promise<KeyInfo>;
    /**
     * Export an existing key as a PEM encrypted PKCS #8 string
     */
    exportKey(name: string, password: string): Promise<string>;
    /**
     * Export an existing key as a PeerId
     */
    exportPeerId(name: string): Promise<PeerId>;
    /**
     * Import a new key from a PEM encoded PKCS #8 string
     *
     * @param {string} name - The local key name; must not already exist.
     * @param {string} pem - The PEM encoded PKCS #8 string
     * @param {string} password - The password.
     * @returns {Promise<KeyInfo>}
     */
    importKey(name: string, pem: string, password: string): Promise<KeyInfo>;
    /**
     * Import a peer key
     */
    importPeer(name: string, peer: PeerId): Promise<KeyInfo>;
    /**
     * Gets the private key as PEM encoded PKCS #8 string
     */
    getPrivateKey(name: string): Promise<string>;
    /**
     * Rotate keychain password and re-encrypt all associated keys
     */
    rotateKeychainPass(oldPass: string, newPass: string): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map