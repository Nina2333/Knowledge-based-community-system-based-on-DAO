import type { Uint8ArrayList } from 'uint8arraylist';
export declare class LongBits {
    hi: number;
    lo: number;
    constructor(hi?: number, lo?: number);
    /**
     * Returns these hi/lo bits as a BigInt
     */
    toBigInt(unsigned?: boolean): bigint;
    /**
     * Returns these hi/lo bits as a Number - this may overflow, toBigInt
     * should be preferred
     */
    toNumber(unsigned?: boolean): number;
    /**
     * ZigZag decode a LongBits object
     */
    zzDecode(): LongBits;
    /**
     * ZigZag encode a LongBits object
     */
    zzEncode(): LongBits;
    /**
     * Encode a LongBits object as a varint byte array
     */
    toBytes(buf: Uint8ArrayList | Uint8Array, offset?: number): void;
    /**
     * Parse a LongBits object from a BigInt
     */
    static fromBigInt(value: bigint): LongBits;
    /**
     * Parse a LongBits object from a Number
     */
    static fromNumber(value: number): LongBits;
    /**
     * Parse a LongBits object from a varint byte array
     */
    static fromBytes(buf: Uint8ArrayList | Uint8Array, offset?: number): LongBits;
}
//# sourceMappingURL=index.d.ts.map