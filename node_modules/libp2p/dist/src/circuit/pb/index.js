/* eslint-disable import/export */
/* eslint-disable complexity */
/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
import { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime';
export var CircuitRelay;
(function (CircuitRelay) {
    let Status;
    (function (Status) {
        Status["SUCCESS"] = "SUCCESS";
        Status["HOP_SRC_ADDR_TOO_LONG"] = "HOP_SRC_ADDR_TOO_LONG";
        Status["HOP_DST_ADDR_TOO_LONG"] = "HOP_DST_ADDR_TOO_LONG";
        Status["HOP_SRC_MULTIADDR_INVALID"] = "HOP_SRC_MULTIADDR_INVALID";
        Status["HOP_DST_MULTIADDR_INVALID"] = "HOP_DST_MULTIADDR_INVALID";
        Status["HOP_NO_CONN_TO_DST"] = "HOP_NO_CONN_TO_DST";
        Status["HOP_CANT_DIAL_DST"] = "HOP_CANT_DIAL_DST";
        Status["HOP_CANT_OPEN_DST_STREAM"] = "HOP_CANT_OPEN_DST_STREAM";
        Status["HOP_CANT_SPEAK_RELAY"] = "HOP_CANT_SPEAK_RELAY";
        Status["HOP_CANT_RELAY_TO_SELF"] = "HOP_CANT_RELAY_TO_SELF";
        Status["STOP_SRC_ADDR_TOO_LONG"] = "STOP_SRC_ADDR_TOO_LONG";
        Status["STOP_DST_ADDR_TOO_LONG"] = "STOP_DST_ADDR_TOO_LONG";
        Status["STOP_SRC_MULTIADDR_INVALID"] = "STOP_SRC_MULTIADDR_INVALID";
        Status["STOP_DST_MULTIADDR_INVALID"] = "STOP_DST_MULTIADDR_INVALID";
        Status["STOP_RELAY_REFUSED"] = "STOP_RELAY_REFUSED";
        Status["MALFORMED_MESSAGE"] = "MALFORMED_MESSAGE";
    })(Status = CircuitRelay.Status || (CircuitRelay.Status = {}));
    let __StatusValues;
    (function (__StatusValues) {
        __StatusValues[__StatusValues["SUCCESS"] = 100] = "SUCCESS";
        __StatusValues[__StatusValues["HOP_SRC_ADDR_TOO_LONG"] = 220] = "HOP_SRC_ADDR_TOO_LONG";
        __StatusValues[__StatusValues["HOP_DST_ADDR_TOO_LONG"] = 221] = "HOP_DST_ADDR_TOO_LONG";
        __StatusValues[__StatusValues["HOP_SRC_MULTIADDR_INVALID"] = 250] = "HOP_SRC_MULTIADDR_INVALID";
        __StatusValues[__StatusValues["HOP_DST_MULTIADDR_INVALID"] = 251] = "HOP_DST_MULTIADDR_INVALID";
        __StatusValues[__StatusValues["HOP_NO_CONN_TO_DST"] = 260] = "HOP_NO_CONN_TO_DST";
        __StatusValues[__StatusValues["HOP_CANT_DIAL_DST"] = 261] = "HOP_CANT_DIAL_DST";
        __StatusValues[__StatusValues["HOP_CANT_OPEN_DST_STREAM"] = 262] = "HOP_CANT_OPEN_DST_STREAM";
        __StatusValues[__StatusValues["HOP_CANT_SPEAK_RELAY"] = 270] = "HOP_CANT_SPEAK_RELAY";
        __StatusValues[__StatusValues["HOP_CANT_RELAY_TO_SELF"] = 280] = "HOP_CANT_RELAY_TO_SELF";
        __StatusValues[__StatusValues["STOP_SRC_ADDR_TOO_LONG"] = 320] = "STOP_SRC_ADDR_TOO_LONG";
        __StatusValues[__StatusValues["STOP_DST_ADDR_TOO_LONG"] = 321] = "STOP_DST_ADDR_TOO_LONG";
        __StatusValues[__StatusValues["STOP_SRC_MULTIADDR_INVALID"] = 350] = "STOP_SRC_MULTIADDR_INVALID";
        __StatusValues[__StatusValues["STOP_DST_MULTIADDR_INVALID"] = 351] = "STOP_DST_MULTIADDR_INVALID";
        __StatusValues[__StatusValues["STOP_RELAY_REFUSED"] = 390] = "STOP_RELAY_REFUSED";
        __StatusValues[__StatusValues["MALFORMED_MESSAGE"] = 400] = "MALFORMED_MESSAGE";
    })(__StatusValues || (__StatusValues = {}));
    (function (Status) {
        Status.codec = () => {
            return enumeration(__StatusValues);
        };
    })(Status = CircuitRelay.Status || (CircuitRelay.Status = {}));
    let Type;
    (function (Type) {
        Type["HOP"] = "HOP";
        Type["STOP"] = "STOP";
        Type["STATUS"] = "STATUS";
        Type["CAN_HOP"] = "CAN_HOP";
    })(Type = CircuitRelay.Type || (CircuitRelay.Type = {}));
    let __TypeValues;
    (function (__TypeValues) {
        __TypeValues[__TypeValues["HOP"] = 1] = "HOP";
        __TypeValues[__TypeValues["STOP"] = 2] = "STOP";
        __TypeValues[__TypeValues["STATUS"] = 3] = "STATUS";
        __TypeValues[__TypeValues["CAN_HOP"] = 4] = "CAN_HOP";
    })(__TypeValues || (__TypeValues = {}));
    (function (Type) {
        Type.codec = () => {
            return enumeration(__TypeValues);
        };
    })(Type = CircuitRelay.Type || (CircuitRelay.Type = {}));
    let Peer;
    (function (Peer) {
        let _codec;
        Peer.codec = () => {
            if (_codec == null) {
                _codec = message((obj, w, opts = {}) => {
                    if (opts.lengthDelimited !== false) {
                        w.fork();
                    }
                    if (opts.writeDefaults === true || (obj.id != null && obj.id.byteLength > 0)) {
                        w.uint32(10);
                        w.bytes(obj.id);
                    }
                    if (obj.addrs != null) {
                        for (const value of obj.addrs) {
                            w.uint32(18);
                            w.bytes(value);
                        }
                    }
                    if (opts.lengthDelimited !== false) {
                        w.ldelim();
                    }
                }, (reader, length) => {
                    const obj = {
                        id: new Uint8Array(0),
                        addrs: []
                    };
                    const end = length == null ? reader.len : reader.pos + length;
                    while (reader.pos < end) {
                        const tag = reader.uint32();
                        switch (tag >>> 3) {
                            case 1:
                                obj.id = reader.bytes();
                                break;
                            case 2:
                                obj.addrs.push(reader.bytes());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                        }
                    }
                    return obj;
                });
            }
            return _codec;
        };
        Peer.encode = (obj) => {
            return encodeMessage(obj, Peer.codec());
        };
        Peer.decode = (buf) => {
            return decodeMessage(buf, Peer.codec());
        };
    })(Peer = CircuitRelay.Peer || (CircuitRelay.Peer = {}));
    let _codec;
    CircuitRelay.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.type != null) {
                    w.uint32(8);
                    CircuitRelay.Type.codec().encode(obj.type, w);
                }
                if (obj.srcPeer != null) {
                    w.uint32(18);
                    CircuitRelay.Peer.codec().encode(obj.srcPeer, w, {
                        writeDefaults: false
                    });
                }
                if (obj.dstPeer != null) {
                    w.uint32(26);
                    CircuitRelay.Peer.codec().encode(obj.dstPeer, w, {
                        writeDefaults: false
                    });
                }
                if (obj.code != null) {
                    w.uint32(32);
                    CircuitRelay.Status.codec().encode(obj.code, w);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {};
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.type = CircuitRelay.Type.codec().decode(reader);
                            break;
                        case 2:
                            obj.srcPeer = CircuitRelay.Peer.codec().decode(reader, reader.uint32());
                            break;
                        case 3:
                            obj.dstPeer = CircuitRelay.Peer.codec().decode(reader, reader.uint32());
                            break;
                        case 4:
                            obj.code = CircuitRelay.Status.codec().decode(reader);
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    CircuitRelay.encode = (obj) => {
        return encodeMessage(obj, CircuitRelay.codec());
    };
    CircuitRelay.decode = (buf) => {
        return decodeMessage(buf, CircuitRelay.codec());
    };
})(CircuitRelay || (CircuitRelay = {}));
//# sourceMappingURL=index.js.map