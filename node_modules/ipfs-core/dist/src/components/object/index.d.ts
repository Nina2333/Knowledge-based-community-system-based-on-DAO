/**
 * @typedef {import('../../types').Preload} Preload
 * @typedef {import('multiformats/cid').CID} CID
 * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions
 */
export class ObjectAPI {
    /**
     * @param {object} config
     * @param {import('ipfs-repo').IPFSRepo} config.repo
     * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs
     * @param {Preload} config.preload
     */
    constructor({ repo, codecs, preload }: {
        repo: import('ipfs-repo').IPFSRepo;
        codecs: import('ipfs-core-utils/multicodecs').Multicodecs;
        preload: Preload;
    });
    data: (cid: import("multiformats/cid").CID<unknown, number, number, import("multiformats/cid").Version>, options?: (import("ipfs-core-types/src/utils").AbortOptions & import("ipfs-core-types/src/utils").PreloadOptions) | undefined) => Promise<Uint8Array>;
    get: (cid: import("multiformats/cid").CID<unknown, number, number, import("multiformats/cid").Version>, options?: (import("ipfs-core-types/src/utils").AbortOptions & import("ipfs-core-types/src/utils").PreloadOptions) | undefined) => Promise<import("@ipld/dag-pb/dist/src/interface.js").PBNode>;
    links: (cid: import("multiformats/cid").CID<unknown, number, number, import("multiformats/cid").Version>, options?: (import("ipfs-core-types/src/utils").AbortOptions & import("ipfs-core-types/src/utils").PreloadOptions) | undefined) => Promise<import("@ipld/dag-pb/dist/src/interface.js").PBLink[]>;
    new: (options?: import("ipfs-core-types/src/object/index.js").NewObjectOptions | undefined) => Promise<import("multiformats/cid").CID<unknown, number, number, import("multiformats/cid").Version>>;
    put: (obj: import("@ipld/dag-pb/dist/src/interface.js").PBNode, options?: import("ipfs-core-types/src/object/index.js").PutOptions | undefined) => Promise<import("multiformats/cid").CID<unknown, number, number, import("multiformats/cid").Version>>;
    stat: (cid: import("multiformats/cid").CID<unknown, number, number, import("multiformats/cid").Version>, options?: (import("ipfs-core-types/src/utils").AbortOptions & import("ipfs-core-types/src/utils").PreloadOptions) | undefined) => Promise<import("ipfs-core-types/src/object/index.js").StatResult>;
    patch: ObjectPatchAPI;
}
export type Preload = import('../../types').Preload;
export type CID = import('multiformats/cid').CID;
export type AbortOptions = import('ipfs-core-types/src/utils').AbortOptions;
import { ObjectPatchAPI } from "./patch/index.js";
//# sourceMappingURL=index.d.ts.map