import type { Startable } from '@libp2p/interfaces/startable';
import type { PeerId } from '@libp2p/interface-peer-id';
import type { ConnectionManager } from '@libp2p/interface-connection-manager';
import type { PeerStore } from '@libp2p/interface-peer-store';
export interface AutoDiallerInit {
    /**
     * Should preemptively guarantee connections are above the low watermark
     */
    enabled?: boolean;
    /**
     * The minimum number of connections to avoid pruning
     */
    minConnections?: number;
    /**
     * How often, in milliseconds, it should preemptively guarantee connections are above the low watermark
     */
    autoDialInterval?: number;
}
export interface AutoDiallerComponents {
    peerId: PeerId;
    connectionManager: ConnectionManager;
    peerStore: PeerStore;
}
export declare class AutoDialler implements Startable {
    private readonly components;
    private readonly options;
    private running;
    private autoDialTimeout?;
    /**
     * Proactively tries to connect to known peers stored in the PeerStore.
     * It will keep the number of connections below the upper limit and sort
     * the peers to connect based on wether we know their keys and protocols.
     */
    constructor(components: AutoDiallerComponents, init: AutoDiallerInit);
    isStarted(): boolean;
    /**
     * Starts the auto dialer
     */
    start(): Promise<void>;
    /**
     * Stops the auto dialler
     */
    stop(): Promise<void>;
    _autoDial(): Promise<void>;
}
//# sourceMappingURL=auto-dialler.d.ts.map