import batch from 'it-batch';
/**
 * Takes an (async) iterator that emits promise-returning functions,
 * invokes them in parallel and emits the results as they become available but
 * in the same order as the input
 */
export default async function* parallelBatch(source, size = 1) {
    for await (const tasks of batch(source, size)) {
        const things = tasks.map(async (p) => {
            return await p().then(value => ({ ok: true, value }), err => ({ ok: false, err }));
        });
        for (let i = 0; i < things.length; i++) {
            const result = await things[i];
            if (result.ok) {
                yield result.value;
            }
            else {
                throw result.err;
            }
        }
    }
}
//# sourceMappingURL=index.js.map