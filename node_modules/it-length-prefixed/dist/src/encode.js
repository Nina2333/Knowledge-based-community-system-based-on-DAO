import { Uint8ArrayList } from 'uint8arraylist';
import { unsigned } from 'uint8-varint';
import { allocUnsafe } from './alloc.js';
const defaultEncoder = (length) => {
    const lengthLength = unsigned.encodingLength(length);
    const lengthBuf = allocUnsafe(lengthLength);
    unsigned.encode(length, lengthBuf);
    defaultEncoder.bytes = lengthLength;
    return lengthBuf;
};
defaultEncoder.bytes = 0;
export function encode(options) {
    options = options ?? {};
    const encodeLength = options.lengthEncoder ?? defaultEncoder;
    const encoder = async function* (source) {
        for await (const chunk of source) {
            // length + data
            const length = encodeLength(chunk.byteLength);
            // yield only Uint8Arrays
            if (length instanceof Uint8Array) {
                yield length;
            }
            else {
                yield* length;
            }
            // yield only Uint8Arrays
            if (chunk instanceof Uint8Array) {
                yield chunk;
            }
            else {
                yield* chunk;
            }
        }
    };
    return encoder;
}
encode.single = (chunk, options) => {
    options = options ?? {};
    const encodeLength = options.lengthEncoder ?? defaultEncoder;
    return new Uint8ArrayList(encodeLength(chunk.byteLength), chunk);
};
//# sourceMappingURL=encode.js.map