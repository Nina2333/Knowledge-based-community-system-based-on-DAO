export interface ParallelOptions {
    /**
     * How many jobs to execute in parallel (default: )
     */
    concurrency?: number;
    ordered?: boolean;
}
/**
 * Takes an (async) iterator that emits promise-returning functions,
 * invokes them in parallel and emits the results as they become available but
 * in the same order as the input
 */
export default function parallel<T>(source: Iterable<() => Promise<T>> | AsyncIterable<() => Promise<T>>, options?: ParallelOptions): AsyncGenerator<T, void, undefined>;
//# sourceMappingURL=index.d.ts.map